module dsoc::SOCService { use iota::object::{Self, UID}; use iota::tx_context::{Self, TxContext, sender}; use iota::table::{Self, Table}; use iota::transfer; use iota::event; use dsoc::CLTReward::{Self, CLTToken}; use std::option::{Self, Option}; // Error codes const E_TICKET_NOT_FOUND: u64 = 1; const E_INVALID_STATE: u64 = 2; const E_NOT_AUTHORIZED: u64 = 3; const E_INSUFFICIENT_STAKE: u64 = 4; // Ticket status constants const STATUS_OPEN: u8 = 0; const STATUS_CLAIMED: u8 = 1; const STATUS_SUBMITTED: u8 = 2; const STATUS_APPROVED: u8 = 3; const STATUS_REJECTED: u8 = 4; /// Stake token for creating tickets public struct StakeToken has key, store { id: UID, amount: u64 } /// Core ticket struct containing all relevant fields public struct Ticket has key, store { id: UID, ticket_id: u64, client: address, analyst: Option<address>, evidence_hash: vector<u8>, report_hash: Option<vector<u8>>, status: u8, stake: u64 } /// Central store for ticket management public struct TicketStore has key, store { id: UID, next_id: u64, tickets: Table<u64, Ticket> } /// Events public struct TicketCreated has copy, drop { ticket_id: u64, client: address, stake: u64 } public struct TicketAssigned has copy, drop { ticket_id: u64, analyst: address } public struct ReportSubmitted has copy, drop { ticket_id: u64, analyst: address, report_hash: vector<u8> } public struct TicketValidated has copy, drop { ticket_id: u64, approved: bool } /// Initialize the contract fun init(ctx: &mut TxContext) { let store = TicketStore { id: object::new(ctx), next_id: 0, tickets: table::new(ctx) }; transfer::public_transfer(store, sender(ctx)); } /// Create a new ticket with stake /// Create a new stake token public fun create_stake(amount: u64, ctx: &mut TxContext): StakeToken { StakeToken { id: object::new(ctx), amount } } /// Create a new ticket with stake public entry fun create_ticket( store: &mut TicketStore, stake: StakeToken, evidence_hash: vector<u8>, ctx: &mut TxContext ) { let StakeToken { id: stake_id, amount } = stake; assert!(amount > 0, E_INSUFFICIENT_STAKE); // Delete the stake token's UID properly object::delete(stake_id); // Create ticket let ticket = Ticket { id: object::new(ctx), ticket_id: store.next_id, client: sender(ctx), analyst: option::none(), evidence_hash, report_hash: option::none(), status: STATUS_OPEN, stake: amount }; // Store ticket table::add(&mut store.tickets, store.next_id, ticket); store.next_id = store.next_id + 1; // Emit event event::emit(TicketCreated { ticket_id: store.next_id - 1, client: sender(ctx), stake: amount }); } /// Assign analyst to ticket public entry fun assign_analyst( store: &mut TicketStore, ticket_id: u64, ctx: &mut TxContext ) { // Get ticket let ticket = table::borrow_mut(&mut store.tickets, ticket_id); // Validate state assert!(ticket.status == STATUS_OPEN, E_INVALID_STATE); // Update ticket ticket.analyst = option::some(sender(ctx)); ticket.status = STATUS_CLAIMED; // Emit event event::emit(TicketAssigned { ticket_id, analyst: sender(ctx) }); } /// Submit report for review public entry fun submit_report( store: &mut TicketStore, ticket_id: u64, report_hash: vector<u8>, ctx: &mut TxContext ) { // Get ticket let ticket = table::borrow_mut(&mut store.tickets, ticket_id); // Validate state and caller assert!(ticket.status == STATUS_CLAIMED, E_INVALID_STATE); assert!(option::contains(&ticket.analyst, &sender(ctx)), E_NOT_AUTHORIZED); // Update ticket ticket.report_hash = option::some(report_hash); ticket.status = STATUS_SUBMITTED; // Emit event event::emit(ReportSubmitted { ticket_id, analyst: sender(ctx), report_hash }); } /// Validate submitted report public entry fun validate_ticket( store: &mut TicketStore, ticket_id: u64, approved: bool, ctx: &mut TxContext ) { // Get ticket let ticket = table::borrow_mut(&mut store.tickets, ticket_id); // Validate state and caller assert!(ticket.status == STATUS_SUBMITTED, E_INVALID_STATE); assert!(ticket.client == sender(ctx), E_NOT_AUTHORIZED); if (approved) { // Reward analyst if (option::is_some(&ticket.analyst)) { let analyst = option::extract(&mut ticket.analyst); let clt = CLTReward::mint_clt(analyst, ticket.stake, ctx); transfer::public_transfer(clt, analyst); }; ticket.status = STATUS_APPROVED; } else { // Create refund stake token let refund = StakeToken { id: object::new(ctx), amount: ticket.stake }; // Refund client transfer::public_transfer(refund, ticket.client); ticket.status = STATUS_REJECTED; }; // Emit event event::emit(TicketValidated { ticket_id, approved }); } } module dsoc::CLTReward { use iota::object::{Self, UID}; use iota::tx_context::{TxContext, sender}; use iota::event; use iota::transfer; // Error codes const E_NOT_AUTHORIZED: u64 = 1; const E_INSUFFICIENT_BALANCE: u64 = 2; /// CLT Token representing reputation/rewards public struct CLTToken has key, store { id: UID, amount: u64, owner: address } /// Event emitted when CLT is awarded public struct CLTAwardEvent has copy, drop { recipient: address, amount: u64 } /// Create a new CLT token for an analyst public fun mint_clt( recipient: address, amount: u64, ctx: &mut TxContext ): CLTToken { // Create new CLT token let token = CLTToken { id: object::new(ctx), amount, owner: recipient }; // Emit award event event::emit(CLTAwardEvent { recipient, amount }); token } /// Get CLT token amount public fun get_amount(token: &CLTToken): u64 { token.amount } /// Get token owner public fun get_owner(token: &CLTToken): address { token.owner } /// Merge two CLT tokens public fun merge(token1: CLTToken, token2: CLTToken, ctx: &mut TxContext): CLTToken { let CLTToken { id, amount: amount1, owner } = token1; let CLTToken { id: id2, amount: amount2, owner: owner2 } = token2; assert!(owner == owner2, E_NOT_AUTHORIZED); // Delete both old UIDs object::delete(id); object::delete(id2); // Create new token with combined amount CLTToken { id: object::new(ctx), amount: amount1 + amount2, owner } } /// Split a CLT token public fun split( token: CLTToken, split_amount: u64, ctx: &mut TxContext ): (CLTToken, CLTToken) { let CLTToken { id, amount, owner } = token; assert!(amount >= split_amount, E_INSUFFICIENT_BALANCE); // Delete original token's UID object::delete(id); let remaining = amount - split_amount; let token1 = CLTToken { id: object::new(ctx), amount: remaining, owner }; let token2 = CLTToken { id: object::new(ctx), amount: split_amount, owner }; (token1, token2) } } this is my contract remember it and build the front end ..